
services:
  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    ports:
      - "${DOCKER_FRONTEND_PORT:-3000}:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:3000/api}
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BYPASS_AUTH=true
    command: npm start

  backend:
    build:
      context: ./backend
    volumes:
      - ./backend:/backend
    ports:
      - "${DOCKER_BACKEND_PORT:-8000}:8000"
      - "514:514/udp"
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DB_NAME=${DB_NAME:-siem_db}
      - DB_USER=${DB_USER:-siem_user}
      - DB_PASSWORD=${DB_PASSWORD:-random_password}
      - DB_HOST=db
      - DB_PORT=3306
    command:
      echo 'Starting server...' &&
      python manage.py runserver_plus --print-sql 0.0.0.0:8000"
    depends_on:
      - db

  db:
    image: mariadb:10.5
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mariadb_data:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=${DB_NAME:-siem_db}
      - MYSQL_USER=${DB_USER:-siem_user}
      - MYSQL_PASSWORD=${DB_PASSWORD:-random_password}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-random_password}
    ports:
      - "${DOCKER_DB_PORT:-3307}:3306"
  
  # Message Broker, it stores and manages the tasks that need to be executed.
  redis:
    image: redis:alpine

    deploy:
      # Cranking up performance with replicas.
      # replicas: 3
      # resources:
      #   limits:
      #     memory: '1G'
      restart_policy:
        condition: on-failure
  
  # Celery constantly checks the Redis broker for new tasks and executes them.
  celery:
    build: 
      context: ./backend
      dockerfile: Dockerfile.celery
    command: celery -A siem worker -l info
    volumes:
      - ./log_files:/app/log_files
      - ./processed_log_files:/app/processed_log_files
    depends_on:
      - backend
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    deploy:
      # Cranking up performance with replicas.
      # replicas: 3
      # resources:
      #   limits:
      #     memory: '1G'
      restart_policy:
        condition: on-failure

  # Celery Beat is a scheduler that periodically runs tasks. - sneding these tasks to Redis
  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile.celery
    command: celery -A siem beat -l info
    volumes:
      - ./log_files:/app/log_files
      - ./processed_log_files:/app/processed_log_files
    depends_on:
      - backend
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

## Monitoring tool for Celery.
  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
      - TZ=Australia/Melbourne
    ports:
      - 5555:5555
    depends_on:
      - redis
      - celery

volumes:
  mariadb_data:
  log_files:
  processed_log_files:
